Alghoritm:
1) take char from s1
   a) find it in s2
   b) increment max + 1
   c) continue
2) in parallel skip char in s1


s1 = BCDABC (6)
s2 = ABC (3)

s1 = 0
s2 = 0

noOfChildrenWithCurrentS1Char = 2

s1 = 1
s2 = 0

noOfChildrenWithCurrentS1Char = 1

s1 = 2
s2 = 0

fun commonChild(s1: String, s2: String): Int {
    // Write your code here

}



commonChild s1Pointer, s1Array, s2Pointer, s2Array
	when 
		s1Pointer == s1Array.size -> 0
		s2Pointer == s2Array.size -> 0
		else -> 
			noOfChildrenWithCurrentS1Char = if s1Array[s1Pointer] == s2Array[s2Pointer]
				1 + commonChild s1Pointer + 1, s1Array, s2Pointer + 1, s2Array
			else
				commonChild s1Pointer, s1Array, s2Pointer + 1, s2Array
				
			noOfChildWithoutCurrentS1Char = commonChild s1Pointer + 1, s1Array, s2Pointer, s2Array
			max(noOfChildrenWithCurrentS1Char, noOfChildWithoutCurrentS1Char)
			
			
val cache = mutableMap<Pair<Int, Int>, Int>()

dropDistinctCharacters(s1, s2)
    val s1Builder = StringBuilder(s1)
    val s2Builder = StringBuilder(s2)
    for char in 'A'..'Z'
        if(!s1.contains(char)) s2.replace(char, "")
			
fun commonChild(s1Pointer: Int, s1Array: CharArray, s2Pointer: Int, s2Array: CharArray): Int {
    if(cache[s1Pointer to s2Pointer] != null) return cache[s1Pointer to s2Pointer] ?: throw IllegalStateException()

    val lcs = when {
        s1Pointer == s1Array.size -> 0
        s2Pointer == s2Array.size -> 0
        else -> {
            if( s1Array[s1Pointer] == s2Array[s2Pointer]) {
                1 + commonChild(s1Pointer + 1, s1Array, s2Pointer + 1, s2Array)
            } else {
                Math.max(
                    commonChild(s1Pointer, s1Array, s2Pointer + 1, s2Array),
                    commonChild(s1Pointer + 1, s1Array, s2Pointer, s2Array)
                )
            }
        }
    }
    cache[s1Pointer to s2Pointer] = lcs
    return lcs
}

fun longestCommonString(s1: String, s2: String): Int {
    val result = Array(s1.size + 1) {Array<Int>(s2.size + 1) {0}}
    for(s1Pointer in 0..(s1.size-1)) {
        for(s2Pointer in 0..(s2.size-1)){
            if(s1.charAt(s1Pointer) == s2.charAt(s2Pointer)) {
                result[s1Pointer + 1][s2Pointer + 1] = (result[s1Pointer][s2Pointer] ?: throw IllegalStateException() )+ 1
            } else {
                result[s1Pointer + 1][s2Pointer + 1] = Math.max(result[s1Pointer+1][s2Pointer] ?: throw IllegalStateException(),result[s1Pointer+1][s2Pointer+1] ?: throw IllegalStateException())
            }
        }
    }
    return result[s1.size][s2.size] ?: throw IllegalStateException()
}

algo:
1 if we reached end of any array return 0
2 check two routs:
	a if current chars match add one to result and move on every array
	  else move on second array to search for matching
	b check if we skip this one on 1st array if we get a better result
	


fun commonChild(s1Chars, s1Position, s2Chars, s2Helper): Int 
	if s1Position == s1Chars.size
		return max
	if s2Position == s2Chars.size
		return max
	if s1Chars[s1Position] == s2Chars[s2Position]
		commonChild(max + 1, s1Chars, s1Position + 1, s2Chars, s2Helper + 1)
		



fun commonChild(s1: String, s2: String): Int {
    // Write your code here

}


var s1Helper = 0
val s1Chars = s1.toCharArray()
var s2Helper = 0
val s2Chars = s2.toCharArray()

fun commonChild(s1Chars, s1Position, s2Chars, s2Helper): Int
var max = 0

var s2Pointer = s2Helper

for s1Pointer in s1Position..s1Chars.lastIndex
	for s2Poiner in s2Position..s2Chars.lastIndex
		if s1Chars[s1Pointer] == s2Chars[s2Pointer]
			max ++
	
	max = max(max, commonChild(s1Chars, s1Position + 1, s2Chars, s2Helper))
			
		
return max
	

return maxChild

s1 = BCDABC
s2 = ABC
3


s1 = BCD
s2 = BDC
2

s1 = 1 s2 = 1
maxChild = 1
---

s1 = 3, s2 = 2
max = 1

--- 
s1 = 2, s2 = 3
max = 1

max of 1 & 1 = 1 + 1 = 2




s1 = AB
s2 = AB
2

s1 = A
s2 = B
1



